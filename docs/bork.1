.\" generated with Ronn/v0.7.3
.\" http://github.com/rtomayko/ronn/tree/0.7.3
.
.TH "BORK" "1" "August 2021" "Skylar MacDonald" "bork"
.
.SH "NAME"
\fBbork\fR \- The Bash\-Operated Reconciling Kludge
.
.SH "SYNOPSIS"
\fBbork\fR
.
.br
\fBbork\fR \fIoperation\fR [\fIconfig\-file\fR] [\fIoptions\fR]
.
.SH "DESCRIPTION"
Bork is a bash DSL for making declarative assertions about the state of a system\.
.
.P
Bork is written against Bash 3\.2 and common unix utilities such as sed, awk and grep\. It is designed to work on any UNIX\-based system and maintain awareness of platform differences between BSD and GPL versions of unix utilities\.
.
.SH "ASSERTIONS AND CONFIG FILES"
At the heart of bork is making \fBassertions\fR in a \fBdeclarative\fR manner via the \fBok\fR and \fBno\fR functions\. That is, you tell it \fIwhat\fR you want the system to look like instead of \fIhow\fR to make it look like that\. An assertion takes a \fBtype\fR and a number of arguments\. It invokes the type\'s handler function with an \fIaction\fR such as \fBstatus\fR, \fBinstall\fR, or \fBupgrade\fR, which determines the imperative commands needed to test the assertion or bring it up to date\. There are a number of included types in the \fBtypes\fR directory, and bork makes it easy to create your own\. The \fBno\fR function works as an opposite to \fBok\fR \-\- an \fBok\fR assertion will require the \fIpresence\fR of something, and a \fBno\fR assertion will require its absence\.
.
.P
When run, bork will test each \fBok\fR/\fBno\fR assertion and determine if it\'s met or not\. If not, bork can go ahead and \fIsatisfy\fR the assertion by installing, upgrading, removing, or otherwise altering the configuration of the item to match the assertion\. It will then test the assertion again\. Declarations are idempotent \-\- if the assertion is already met, bork will not do anything\.
.
.P
When you\'re happy with your config script, you can compile it to a standalone script which does not require bork to run\. The compiled script can be passed around via curl, scp or the like and run on completely new systems\.
.
.SH "ASSERTION TYPES"
You can run \fBbork types\fR from the command line to get a list of the assertion types and some basic information about their usage and options\.
.
.SH "RUNTIME OPERATIONS"
Per the usage guide, bork has a few main modes of operation:
.
.IP "\(bu" 4
\fBstatus\fR: Reports on the status of the assertions in a config file\.
.
.IP "\(bu" 4
\fBsatisfy\fR: Checks the status of assertions in a config file, satisfying them where needed\.
.
.IP "\(bu" 4
\fBcompile\fR: Compiles a config file to a standalone script\.
.
.IP "\(bu" 4
\fBcheck\fR: Performs a status report on a single assertion\.
.
.IP "\(bu" 4
\fBdo\fR: Performs a satisfy operation on a single assertion\.
.
.IP "\(bu" 4
\fBinspect\fR: Output a Bork\-compatible config file based on the current state of the system\.
.
.IP "" 0
.
.SS "\fBstatus\fR \fIconfig\-file\fR"
The \fBstatus\fR command will confirm that assertions are met or not, and output their status\. It will not take any action to satisfy those assertions\. There are a handful of statuses an assertion can return, and this since this mode is the closest bork can do to a true \'dry run\'*, you can use it to test a script against a pre\-existing machine\.
.
.P
* Some types, such as \fBgit\fR, need to modify local state by talking to the network (such as performing \fBgit fetch\fR), without modifying the things the assertion aims to check\.
.
.P
The status command will give you output such as:
.
.IP "" 4
.
.nf

outdated: brew
ok: brew git
missing: brew zsh
ok: directory /Users/skylar/code
conflict (upgradable): github skylarmacdonald/dotfiles
local git repository has uncommitted changes
ok: symlink /Users/skylar/\.gitignore /Users/skylar/code/dotfiles/configs/gitignore
conflict (clobber required): symlink /Users/skylar/\.lein /Users/skylar/code/dotfiles/configs/lein
not a symlink: /Users/skylar/\.lein
mismatch (upgradable): defaults com\.apple\.dock tilesize integer 36
expected type: integer
received type: float
expected value: 36
received value: 55
.
.fi
.
.IP "" 0
.
.P
Each item reports its status like so:
.
.IP "\(bu" 4
\fBok\fR: The assertion is met as best we can determine\.
.
.IP "\(bu" 4
\fBno\fR: The assertion is met, because the item is absent from the system\.
.
.IP "\(bu" 4
\fBmissing\fR: The assertion is not met, and no trace of it ever being met was found\.
.
.IP "\(bu" 4
\fBpresent\fR: The assertion is not met, as something is present on the system that shouldn\'t be\. It can be satisfied by removing the item\.
.
.IP "\(bu" 4
\fBoutdated\fR: The assertion is met, but can be upgraded to a newer version\.
.
.IP "\(bu" 4
\fBmismatch (upgradable)\fR: The assertion is not met as specified, something is different\. It can be satisfied easily\. An explanation will be given\.
.
.IP "\(bu" 4
\fBconflict (upgradable)\fR: The assertion is not met as specified\. It can be satisfied easily, but doing so may result in data loss\.
.
.IP "\(bu" 4
\fBconflict (clobber required)\fR: The assertion is not met as specified\. Bork cannot currently satisfy this assertion\. In the future, it will be able to, but doing so may result in data loss\.
.
.IP "" 0
.
.SS "\fBcheck\fR \fIassertion\fR"
The \fBcheck\fR command will take a single assertion on the command line and perform a \fBstatus\fR check as above for it\.
.
.SS "\fBsatisfy\fR \fIconfig\-file\fR"
The \fBsatisfy\fR command is where the real magic happens\. For every assertion in the config file, bork will check its status as described in the \fBstatus\fR command above, and if it is not \fBok\fR or \fBno\fR it will attempt to make it \fBok\fR or \fBno\fR, typically via \fIinstalling\fR, \fIupgrading\fR or \fIremoving\fR something \-\- but sometimes a \fIconflict\fR is detected which could lose data, such as a local git repository having uncommitted changes\. In that case, bork will warn you about the problem and ask if you want to proceed\. Sometimes conflicts are detected which bork does not know how to resolve â€” it will warn you about the problem so you can fix it yourself\.
.
.SS "\fBdo\fR \fIassertion\fR"
The \fBdo\fR command will take a single assertion on the command line and perform a \fBsatisfy\fR operation on it as above\.
.
.SS "\fBcompile\fR \fIconfig\-file\fR"
The \fBcompile\fR command will output to STDOUT a standalone shell script that does not require bork to run\. You may pass this around as with any file via curl or scp or whatever you like and run it\. Any sub\-configs via \fBinclude\fR will be included in the output, and any type that needs to include resources to do what it does, such as the \fBfile\fR type, will include their resources in the script as base64 encoded data\.
.
.SS "\fBinspect\fR \fItype\fR"
The \fBinspect\fR command will ask a type for a current inventory of how a system is configured, and output to STDOUT a Bork\-compatible config file to configure the same state\. For example, when used with the \fBbrew\fR type, this will list all formulae installed with Homebrew and output a config file to check for those same formulae\. \fBNot all types will work with this command\.\fR Bork will exit with code 1 if a type has not implemented \fBinspect\fR\.
.
.SH "CUSTOM TYPES"
Writing new types is pretty straightforward, and there is a guide to writing them in the \fBdocs/\fR directory\. If you wish to use a type that is not in bork\'s \fBtypes\fR directory, you can let bork know about it with the \fBregister\fR declaration:
.
.IP "" 4
.
.nf

register etc/pgdb\.sh
ok pgdb my_app_db
.
.fi
.
.IP "" 0
.
.SH "COMPOSING CONFIG FILES"
You may compose config files into greater operations with the \fBinclude\fR directive with a path to a script relative to the current script\'s directory\.
.
.IP "" 4
.
.nf

# this is main\.sh
include databases\.sh
include etc/projects\.sh
.
.fi
.
.IP "" 0
.
.IP "" 4
.
.nf

# this is etc/projects\.sh
include project\-one\.sh
include project\-two\.sh
# these will be read from the etc/ directory
.
.fi
.
.IP "" 0
.
.SS "TAKING FURTHER ACTION ON CHANGES"
Bork has two types of callback: before and after functions\. These are only used when Bork is satisfying assertions (i\.e\. when running \fBbork satisfy\fR)\.
.
.P
Until Bork starts processing an assertion made with \fBok\fR or \fBno\fR, there\'s no way to know if anything will change\. Therefore, Bork will look for and execute functions with known names while it processes an assertion, before making the change\.
.
.P
The functions Bork expects are named:
.
.IP "\(bu" 4
\fBbork_will_change\fR: Bork will make any change at all to the system, i\.e\., the assertion is not satisfied and Bork will change it\.
.
.IP "\(bu" 4
\fBbork_will_install\fR: The assertion is completely missing, and Bork will install something fresh to satisfy it\.
.
.IP "\(bu" 4
\fBbork_will_upgrade\fR: The assertion is partially satisfied, but needs upgrading (e\.g\. an outdated package, a file with the wrong permissions)\. Bork will change it in\-place to satisfy it fully\.
.
.IP "\(bu" 4
\fBbork_will_remove\fR: The assertion specifies the removal of something that is present on the system, and Bork will remove it to satisfy the assertion\.
.
.IP "" 0
.
.P
Each of these will be unset by Bork after it has run them\. You should only define these functions immediately before the assertion you wish to apply them to\.
.
.P
Bork will also call all of these functions with \fB_any\fR appended to the names (e\.g\. \fBbork_will_change_any\fR) \-\- these callbacks will not be unset, and will be called every time it applies\.
.
.P
These are used as follows:
.
.IP "" 4
.
.nf

bork_will_install () {
  echo "callback says hello world"
}
ok directory foo
.
.fi
.
.IP "" 0
.
.P
Bork will then output the following if (and only if) the directory \fBfoo\fR has been newly created:
.
.IP "" 4
.
.nf

missing: directory foo
callback says hello world
verifying install: directory foo
* success
.
.fi
.
.IP "" 0
.
.P
If the directory had already existed, the \fBbork_will_install\fR function would not have been called\. Bork would also not have called the function if it had upgraded the state of the system, e\.g\. if the directory had existed but had the incorrect permissions\.
.
.P
After Bork has made a change, you may call a provided function in your script to determine the outcome of the change\. These are used as follows:
.
.IP "" 4
.
.nf

ok brew fish
if did_install; then
  ok shells $(brew --prefix)/bin/fish
  chsh -s $(brew --prefix)/bin/fish
fi
.
.fi
.
.IP "" 0
.
.P
There are four functions to help you take further actions after a change:
.
.IP "\(bu" 4
\fBdid_install\fR: did the previous assertion result in the item being installed from scratch?
.
.IP "\(bu" 4
\fBdid_upgrade\fR: did the previous assertion result in the existing item being upgraded?
.
.IP "\(bu" 4
\fBdid_update\fR: did the previous assertion result in either the item being installed or upgraded?
.
.IP "\(bu" 4
\fBdid_remove\fR: did the previous assertion result in the existing item being removed (e\.g\. deleted or uninstalled)?
.
.IP "\(bu" 4
\fBdid_error\fR: did attempting to install or upgrade the previous assertion result in an error?
.
.IP "" 0
.
.P
Unlike with before callbacks, Bork will not call any functions after making a change\. It is up to you to handle the logic however you wish\. As with the before callbacks, you are strongly advised to use these functions immediately after the assertion you wish to check\.
.
.SH "SEE ALSO"
Bork documentation: \fIhttps://skylarmacdonald\.github\.io/bork\fR
.
.SH "AUTHORS"
Bork\'s lead maintainer is Skylar MacDonald\. It was created and previously maintained by Matthew Lyon\.
.
.P
A full list of contributors is available on GitHub:
.
.br
\fIhttps://github\.com/skylarmacdonald/bork/graphs/contributors\fR
.
.SH "BUGS"
See our issues on GitHub:
.
.br
\fIhttps://github\.com/skylarmacdonald/bork/issues\fR
