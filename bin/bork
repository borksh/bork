#!/usr/bin/env bash

# this is done as an eval'd string instead of a straight up
# function and statement because we want to re-use it in
# "compile" mode without repeating ourselves.  It's a hack,
# but a purposeful one.
BORK_SETUP_FUNCTION=$(cat <<HERE
getDir () {
  fname=\$1
  while [ -h "\$fname" ]; do
    dir=\$(cd -P "\$(dirname "\$fname")" && pwd)
    fname=\$(readlink \$fname)
    [[ \$fname != /* ]] && fname="\$dir/\$fname"
  done
  echo "\$(cd "\$(dirname \$fname)" && pwd -P)"
}
# used by loader to find core/ and stdlib/
BORK_SOURCE_DIR="\$(cd \$(getDir \${BASH_SOURCE[0]})/.. && pwd -P)"
HERE
)
eval "$BORK_SETUP_FUNCTION"

# --------------------------------------------------------
is_compiled () { return 1; }

operation=$1
shift

# used by include to find 'include foo/bar.sh'
BORK_SCRIPT_DIR=$PWD
if [ -n "$1" ]; then
    BORK_SCRIPT_DIR=$(getDir "$1")
fi
BORK_WORKING_DIR=$PWD

for file in $BORK_SOURCE_DIR/lib/helpers/*.sh \
            $BORK_SOURCE_DIR/lib/declarations/*.sh \
            $BORK_SOURCE_DIR/lib/support/*.sh;
do
  . $file
done

case "$operation" in
  compile) bork_compile $* ;;
  load) : ;;
  satisfy | status) . $1 ;;
  check)
    fn=$1
    shift
    operation=status
    $fn $* ;;
  do)
    fn=$1
    shift
    operation=satisfy
    $fn $* ;;
  types)
    typearg=$1
    shift
    if [ -z $typearg ]; then
      for type in $BORK_SOURCE_DIR/types/*.sh; do
        type_help $type
      done
    else
      type_help "$BORK_SOURCE_DIR/types/$typearg.sh"
    fi
    ;;
  docgen)
    for type in $BORK_SOURCE_DIR/types/*.sh; do
      if [ ! -s "$BORK_SOURCE_DIR/docs/_assertions/$(basename $type '.sh').md" ]; then
        desc=$(. $type desc)
        i=0
        summary=
        usage=
        while read -r line; do
          [ "$i" -eq 0 ] && summary=$line || usage=$([ -n "$usage" ] && echo "$usage"; echo "$line")
          (( i ++ ))
        done <<< "$desc"
        echo -e "---\nname: $(basename $type '.sh')\n---\n$summary" > "$BORK_SOURCE_DIR/docs/_assertions/$(basename $type '.sh').md"
        if [ -n "$usage" ]; then
          echo -e "\n\n### Usage\n\n\`\`\`bash" >> "$BORK_SOURCE_DIR/docs/_assertions/$(basename $type '.sh').md"
          while read -r line; do
            echo -e "$line" >> "$BORK_SOURCE_DIR/docs/_assertions/$(basename $type '.sh').md"
          done <<< "$usage"
          echo -e "\`\`\`" >> "$BORK_SOURCE_DIR/docs/_assertions/$(basename $type '.sh').md"
        fi
      fi
    done
    ;;
  --version)
    echo "bork 0.12.0"
    ;;
  *) cat <<END
bork usage:

bork operation [config-file] [options]

where "operation" is one of:

- check:      perform 'status' for a single command
    example:  bork check ok github skylarmacdonald/dotfiles
- compile:    compile the config file to a self-contained script output to STDOUT
    --conflicts=(y|yes|n|no)  If given, sets an automatic answer for conflict resolution.
    example:  bork compile dotfiles.sh --conflicts=y > install.sh
- do:         perform 'satisfy' for a single command
    example:  bork do ok github skylarmacdonald/dotfiles
- satisfy:    satisfy the config file's conditions if possible
- status:     determine if the config file's conditions are met
- types:      list types and their usage information
- docgen:     generates documentation under docs/_assertions for newly-added types
END
  exit 1
  ;;
esac
